@page "/chat"
@using Service
@using System.Text.Json
@inject UserState UserState
@inject NavigationManager Navigation
@inject ChatService ChatService
@using Microsoft.AspNetCore.WebUtilities

<MudGrid Spacing="1">
    @if (!string.IsNullOrEmpty(TargetUser))
    {
        <MudItem Style="Height: 5vh" xs="12"><MudText Align="Align.Center" Typo="Typo.h6">与 @TargetUser.Substring(0, Math.Min(6, TargetUser.Length)) 的聊天</MudText></MudItem>
    }
    <MudItem xs="12">
        <MudContainer Fixed="true">
            <MudPaper Height="70vh" Width="100%" Square="true" Class="mud-theme-primary" Style="overflow-y: auto;">
                <MudList T="string" Dense="true">
                    @foreach (var msg in messages)
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body1">@msg</MudText>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="9" Style="display: flex; align-items: center;">
        <MudTextField @bind-Value="messageInput" Label="Outlined" Variant="Variant.Outlined" FullWidth="true"></MudTextField>
    </MudItem>

    <MudItem xs="3" Style="display: flex; align-items: center;">
        <MudButton @onclick="SendMessage" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Primary</MudButton>
    </MudItem>
</MudGrid>


@code{
    [Parameter]
    [SupplyParameterFromQuery(Name = "user")]
    public string? TargetUser {get;set;}
    private string messageInput=string.Empty;
    private List<string> messages = new List<string>();
    protected void LoadChatMessages(){
        if(TargetUser == null)
            TargetUser = "server";
        UserState.RemoveHasMsg(TargetUser);
        //根据 TargetUser 加载相关聊天内容（例如通过 WebSocket 请求服务端数据）
        messages = ChatService.GetHistoryMsgList(TargetUser);
    }
    protected void SaveChatMessages(){
        //保存相关聊天内容
        if(TargetUser == null)
            TargetUser = "server";
        ChatService.SaveChatMessages(TargetUser,messages);
    }
    protected async Task HandlereceiveMesg(Message message){
        switch (message.command)
        {
            case "userList":
                // 获取原始字符串
                var rawData = message.data; // 直接将 JsonElement 转换为字符串
                // 分割逗号分隔的字符串
                var userList = rawData.Split(',').ToList();
                if (userList != null)
                {
                    messages.Add($"The UserList has changed,Now is:  {string.Join(",",userList)}");
                    UserState.UpdateUsers(userList);
                }
                break;

            case "brodcastMes":
                var chatMessage = message.data;
                //当前不在server页面
                if(TargetUser!=null && TargetUser!="server"){
                    UserState.AddHasMsg("server");
                    ChatService.AddBackMessage(message);
                }else{
                    if (!string.IsNullOrWhiteSpace(chatMessage))
                    {
                        messages.Add($"the server: {chatMessage}");
                    }
                }                
                break;

            default: //这里就是处理别的用户转发的地方
                chatMessage = message.data;
                //发送的用户
                var otherUserId = message.command;
                if(otherUserId == TargetUser){
                    if (!string.IsNullOrWhiteSpace(chatMessage))
                    {
                        messages.Add($"other User: {chatMessage}");
                        await InvokeAsync(StateHasChanged);
                    }
                }else{
                    //不在当前用户页面的情况
                    UserState.AddHasMsg(otherUserId);
                    ChatService.AddBackMessage(message);
                }
                break;
        }
        SaveChatMessages();
        await InvokeAsync(StateHasChanged);
    }
    protected override async Task OnInitializedAsync()
    {
        await ChatService.ConnectAsync("ws://localhost:8008/ws");
        // 启动监听用户列表更新
        await ChatService.ListenAsync(HandlereceiveMesg);
    }
    // 在参数变化时执行逻辑
    protected override async Task OnParametersSetAsync(){
        messageInput = string.Empty;
        @* messages.Clear(); *@
        LoadChatMessages();
        await InvokeAsync(StateHasChanged);
        
    }


    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(messageInput))
        {
            messages.Add($"你: {messageInput}"); // 添加用户的消息
            await ChatService.SendMessageAsync(messageInput,TargetUser);
            messageInput = string.Empty;
            SaveChatMessages();
        }
    }

    public async Task DisposeAsync()
    {
        await ChatService.DisconnectAsync();
    }
}
<style>
    *{
        @* border: red solid 1px; *@
        padding: 1px;
    }
</style>